Overview: Investment Thesis Intelligence System ("Second Brain")
We are building an AI-powered Investment Thesis Intelligence System ‚Äî a ‚ÄúSecond Brain‚Äù for analysts ‚Äî designed to mirror, expand, and monitor investment logic with precision and clarity. This system ingests raw thesis statements and transforms them into structured, traceable frameworks by:

Decomposing logic into causal chains and mental models
Surfacing hidden assumptions and counterfactuals
Mapping metrics to real-world data sources
Tracking live signals that validate or challenge the thesis over time
It acts as a thinking partner, not a decision-maker ‚Äî helping analysts sharpen their conviction, uncover blind spots, and stay ahead of thesis drift. Whether the thesis is about Nvidia‚Äôs AI margins or aerospace purchase momentum, the system adapts to the domain and delivers structured insight, monitoring, and feedback loops.
Understand the thesis.
Extract implied logic and assumptions.
Identify relevant metrics.
Suggest monitoring strategies.

It needs to be able to take in a thesis statement along with the corresponding research and data sources, and then output a structured analysis of the thesis. The output should include:

There will also be situations where a thesis has not been formally created and we need to construct one from the data. In these cases, the system should be able to generate a thesis statement based on the data and then analyze it in the same way as above.

üß† AI Agent Prompt: Thesis Analysis Module
Objective: Analyze an investment thesis to extract its underlying logic, assumptions, and monitoring needs.

üìù Input Thesis
‚ÄúWe believe momentum in aerospace aircraft purchases can be detected by tracking parts purchase flow, aircraft construction hiring trends, and average wages in key manufacturing states.‚Äù

üéØ Your Tasks
Thesis Decomposition

Identify the core claim.
Break it into causal components (e.g., ‚ÄúIf X, then Y, therefore Z‚Äù).
Implied Assumptions

What is the thesis assuming about:
Industry behavior?
Labor market dynamics?
Economic conditions?
Timing?
Mental Model Detection

What type of investment logic is being used?
Leading indicator tracking?
Labor cost signaling?
Supply chain momentum?
Counter-Thesis Generation

What would have to be true for this thesis to fail?
What are plausible opposing views?
Metric Mapping

List all metrics that would validate or falsify this thesis.
For each metric, specify:
What to track
How often
Why it matters
Monitoring Suggestions

Propose a set of ‚Äúwatch conditions‚Äù (e.g., ‚ÄúAlert if hiring drops below 2,000 per quarter‚Äù).
Suggest review intervals (e.g., monthly, quarterly).
üß™ Output Format
Return a structured JSON or markdown block with:

core_claim
causal_chain
assumptions
mental_model
counter_thesis
metrics_to_track
monitoring_plan
# Document Processing Integration

[2025-05-23 13:23:17] - Added document processing capabilities

## Overview
Integration of PDF and Excel document processing into the Investment Thesis Intelligence System, enabling automated extraction and analysis of research data from various document formats.

## Project Goal
Extend the system's capabilities to ingest and interpret PDFs and Excel spreadsheets containing research data, transforming them into structured data for thesis analysis.

## Key Features
- PDF text and table extraction
- Multi-workbook Excel processing
- Document metadata tracking
- Integration with existing research journey
- Automated data structuring
- Error handling and validation

## Overall Architecture

### Component Structure
```
src/
‚îî‚îÄ‚îÄ services/
    ‚îú‚îÄ‚îÄ document_processing/
    ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
    ‚îÇ   ‚îú‚îÄ‚îÄ document_processor.py    # Base interface
    ‚îÇ   ‚îú‚îÄ‚îÄ pdf_processor.py         # PDF handling
    ‚îÇ   ‚îú‚îÄ‚îÄ excel_processor.py       # Excel handling
    ‚îÇ   ‚îî‚îÄ‚îÄ metadata.py             # Document metadata
    ‚îî‚îÄ‚îÄ journeys/
        ‚îî‚îÄ‚îÄ research_first_journey.py # Updated for docs
```

### Data Flow
1. Document Upload ‚Üí FastAPI endpoint
2. Format-specific Processing
3. Data Extraction & Structuring
4. Session State Integration
5. Research Journey Analysis

### Integration Points
- FastAPI file upload handlers
- Session state management
- Research journey pipeline
- AI analysis system

## Technical Dependencies
- pypdf: PDF processing
- openpyxl: Excel workbook handling
- pandas: Data structuring
- FastAPI: File upload handling

## Notification Demonstration

### Price Change Tracking
**Description**: Track price changes of key assets and notify when significant changes occur.
**Acceptance Criteria**:
- Notifications triggered when price change exceeds 5% in a day
- Notifications include asset name, current price, and change percentage
- Historical price context provided in notification
**Technical Notes**:
- Use existing signal extraction service to monitor price changes
- Implement threshold-based alert system
- Store notification events in database for history
**Dependencies**:
- `src/services/signal_extraction.py` (signal monitoring)
- `test_mental_model_flow.py` (test cases)
- `web/static/js/SignalRenderer.js` (frontend display)

### Analyst Prediction Display
**Description**: Display analyst predictions for assets and compare with actual performance.
**Acceptance Criteria**:
- Display predictions for next quarter and year
- Show accuracy of past predictions
- Allow filtering by asset and analyst
**Technical Notes**:
- Integrate with analyst prediction data source
- Develop component to display predictions vs actuals
- Calculate prediction accuracy metrics
**Dependencies**:
- `src/services/data_registry.py` (data access)
- `web/static/js/MetricRenderer.js` (visualization)

### Market Sentiment Visualization
**Description**: Visualize market sentiment indicators for tracked assets.
**Acceptance Criteria**:
- Real-time sentiment indicators from news/social media
- Historical sentiment trends
- Sentiment scores for each asset
**Technical Notes**:
- Use NLP to analyze news/social media
- Aggregate sentiment scores
- Visualize using charts
**Dependencies**:
- `src/services/signal_extraction.py` (sentiment analysis)
- `web/static/js/SignalGraph.js` (graphing)

### Counter-Thesis Simulation
**Description**: Simulate impact of counter-theses over 2-3 year horizon.
**Acceptance Criteria**:
- User can input counter-thesis
- System simulates impact on asset performance
- Comparison with main thesis
**Technical Notes**:
- Develop simulation engine based on key metrics
- Allow parameter adjustments
- Visualize simulation results
**Dependencies**:
- `src/datastructures/thesis.py` (thesis models)
- `web/static/js/RecommendationRenderer.js` (results display)

(2025-05-30 07:15:05) - Added research file upload/attachment as a core feature for thesis analysis.
[2025-06-01 10:25:18] - System stabilized: All LLM output handling, file ingestion, document diagnostics, and prompt transparency mechanisms completed. UI/UX, backend, and research ingestion now fully robust and user-facing. All reasoning trace, prompt preview, and research display interactions tested and confirmed in production-like workflow.
[2025-06-09 09:03:32] - Data source management and preference logic centralized in `app/services/data_registry.py` (FactSet/Xpressfeed now prioritized). See "Data Source Registry and Preferences" in `README.md` for developer/stakeholder documentation and migration/deprecation notice.
[2025-06-10 16:33:08] - Added Notification Demonstration section with requirements